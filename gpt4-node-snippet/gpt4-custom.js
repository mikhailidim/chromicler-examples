//  API Call part was generated by ChatGPT-4o 
//  The mai body is adjusted to meet WEBMETHODS.io Integration 
//  input/output parameters 


const https = require("https");
var request = require ("request");

module.exports = function(){

    this.id = "openai-chat-call"; 
    this.label = "ChatGPT 4"; 
    this.help = "This is a simple chat GPT implementation of completion"; 
    this.input = {
        "title": "Sample input",
        "type": "object",
        "properties": {
            "gpt_key": {
                "title": "OpenAI API Key",// displayed as field label  
                "type": "string",
                "format": "password",
                "description":"Enter first name",// description of field
                "minLength": 1 // define as required
            },
            "gpt_message": {
                "title": "Input Message",// displayed as field label  
                "type": "object",
                "description":"Name of the mode you want to call. the list of models" +
                            " is here https://platform.openai.com/docs/models",// description of field                           
                "minLength": 1, // define as required
                "properties": {
                    "model": {
                        "title": "Model ID",
                        "type": "string",
                        "format":  "string"
                    },
                    "n": {
                        "title": "Responses",
                        "type": "integer",
                        "format": "integer",
                        "default": 1
                    },  
                    "temperature": {
                        "title": "Temperature",
                        "type" : "number",
                        "format": "number" 
                    },    
                    "max_tokens": {
                        "title": "Max Tokens",
                        "type": "number",
                        "format": "integer",
                        "default": 180    
                    },

                    // TO-DO - Additional Model Parameters
                     // top_p: { "number"}                                       
                    // stream: {false}
                    // logprobs
                    // stop
                    // presence_penalty
                    // frequency_penalty
                    // best_of
                    // logit_bias
                    // user
                    
                    "messages": {
                        "title":"Messages",
                        "type" :"array",
                        "minlength": 1,
                        "items": {
                            "title": "Message",
                            "type": "object",
                            "properties": {
                                "role": {
                                    "title": "Role",
                                    "type" : "string",
                                    "format": "string"
                                },
                                "content": {
                                    "title": "Content",
                                    "type": "string",
                                    "format": "textarea"
                                }
                            }    
                        }
                    }
                }
            }
        }
    }; 

this.output = {
    "title" : "output",
    "type" : "object",
    "properties":{
        "choices":{
            "title":"Response",
            "type" :"array",
            "items": {
                "type": "object",
                "title": "choice", 
                "properties": {
                    "finish_reason": {
                        "title" : "finish reason",
                        "type": "string",
                        "format": "string"    
                        },
                    "index": {
                        "title": "Index",
                        "type": "number",
                        "format": "integer" 
                },
                "message": {
                    "title": "Message",
                    "type": "object",
                    "properties": {
                        "content": {
                            "title": "Content",
                            "type": "string",
                            "format": "textarea"
                        },
                        "role": {
                            "title": "Role",
                            "type": "string",
                            "format": "string" 
                        }
                    }
                },        
                "logprobs": {
                    "title": "Logprobs",
                    "type": "string",
                    "format": "string"
                }
            }
        }
        },
        "created": {
            "title": "Created",
            "type" : "number",
            "format": "integer"
        },
        "id": {
            "title": "id",
            "type": "string",
            "format": "string"
        },
        "model": {            
            "title": "Model",
            "type": "string",
            "format": "string"
        },
        "object": {
            "title": "Reply Object",
            "type": "string",
            "format": "string"
        },
        "usage": {
            "title": "Usage",
            "type": "object",
            "properties": {
                "completion_tokens": {
                    "title": "Completion Tokens",
                    "type": "number",
                    "format": "integer"                           
                },
                "prompt_tokens": {
                    "title": "Prompt Tokens",
                    "type": "number",
                    "format": "integer"                           
                },
                "total_tokens": {
                "title": "Total Tokens",
                "type": "number",
                "format": "integer"                           
                }
            }
        } 
    }
};


    this.execute = function(input,output){

    // Options for the HTTPS request
        const options = {
            hostname: "api.openai.com",
            port: 443,
            path: "/v1/chat/completions",
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${input.gpt_key}`,
                'Content-Length': Buffer.from(JSON.stringify(input.gpt_message)).length
            }
        };

        // Create the request
        const req = https.request(options, (res) => {
            let responseData = '';
            res.on('data', (chunk) => {
                console.dir(chunk);
                responseData += JSON.stringify(chunk);
            });

            res.on('end', () => {
                if (res.statusCode === 200) {
                    return output(null,{"choices": JSON.parse(responseData)});
                } else {
                    console.error(`Error: ${res.statusCode} ${res.statusMessage}`);
                    return output({"error": { "code": res.statusCode, "message": res.statusMessage}},null);
                }
            });
        });

        // Handle any errors with the request
        req.on('error', (error) => {
            console.error('Error:', error);
        });

        // Write the data to the request body
        req.write(input.gpt_message);

        // End the request
        req.end();
    }  //end of execute function
}
